// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: source.sql

package database

import (
	"context"
)

const createSource = `-- name: CreateSource :one
INSERT INTO source
(
    source_id,
    source_name
) VALUES (
    $1, $2
) RETURNING id, source_id, source_name
`

type CreateSourceParams struct {
	SourceID   string
	SourceName string
}

func (q *Queries) CreateSource(ctx context.Context, arg CreateSourceParams) (Source, error) {
	row := q.db.QueryRowContext(ctx, createSource, arg.SourceID, arg.SourceName)
	var i Source
	err := row.Scan(&i.ID, &i.SourceID, &i.SourceName)
	return i, err
}

const getSourceById = `-- name: GetSourceById :one
SELECT id, source_id, source_name FROM source where id = $1 LIMIT 1
`

func (q *Queries) GetSourceById(ctx context.Context, id int64) (Source, error) {
	row := q.db.QueryRowContext(ctx, getSourceById, id)
	var i Source
	err := row.Scan(&i.ID, &i.SourceID, &i.SourceName)
	return i, err
}

const getSourceBySourceId = `-- name: GetSourceBySourceId :one
SELECT id, source_id, source_name  FROM source where source_id = $1 LIMIT 1
`

func (q *Queries) GetSourceBySourceId(ctx context.Context, sourceID string) (Source, error) {
	row := q.db.QueryRowContext(ctx, getSourceBySourceId, sourceID)
	var i Source
	err := row.Scan(&i.ID, &i.SourceID, &i.SourceName)
	return i, err
}
