// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: news.sql

package database

import (
	"context"
	"database/sql"
)

const createNews = `-- name: CreateNews :one
INSERT INTO news (
    source,
    author,
    title,
    description,
    url,
    publishedAt
) VALUES (
    (SELECT source_id FROM source WHERE source_id = $1),
    $2, $3, $4, $5, $6
) ON CONFLICT (title) DO UPDATE
    SET author = EXCLUDED.author,
        description = EXCLUDED.description,
        url = EXCLUDED.url,
        publishedAt = EXCLUDED.publishedAt
RETURNING id, source, author, title, description, url, publishedat
`

type CreateNewsParams struct {
	SourceID    string
	Author      sql.NullString
	Title       sql.NullString
	Description sql.NullString
	Url         sql.NullString
	Publishedat sql.NullTime
}

func (q *Queries) CreateNews(ctx context.Context, arg CreateNewsParams) (News, error) {
	row := q.db.QueryRowContext(ctx, createNews,
		arg.SourceID,
		arg.Author,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.Publishedat,
	)
	var i News
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Author,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Publishedat,
	)
	return i, err
}

const getAllNews = `-- name: GetAllNews :many
SELECT n.id, n.source, n.author, n.title, n.description, n.url, n.publishedat, S.source_name FROM news N
INNER JOIN source S ON S.source_id = N.source
`

type GetAllNewsRow struct {
	ID          int64
	Source      string
	Author      sql.NullString
	Title       sql.NullString
	Description sql.NullString
	Url         sql.NullString
	Publishedat sql.NullTime
	SourceName  string
}

func (q *Queries) GetAllNews(ctx context.Context) ([]GetAllNewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllNews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllNewsRow
	for rows.Next() {
		var i GetAllNewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.Author,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.Publishedat,
			&i.SourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleNews = `-- name: GetSingleNews :one
SELECT n.id, n.source, n.author, n.title, n.description, n.url, n.publishedat, S.source_name FROM news N
INNER JOIN source S ON S.id = N.source
WHERE N.id = $1 LIMIT 1
`

type GetSingleNewsRow struct {
	ID          int64
	Source      string
	Author      sql.NullString
	Title       sql.NullString
	Description sql.NullString
	Url         sql.NullString
	Publishedat sql.NullTime
	SourceName  string
}

func (q *Queries) GetSingleNews(ctx context.Context, id int64) (GetSingleNewsRow, error) {
	row := q.db.QueryRowContext(ctx, getSingleNews, id)
	var i GetSingleNewsRow
	err := row.Scan(
		&i.ID,
		&i.Source,
		&i.Author,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.Publishedat,
		&i.SourceName,
	)
	return i, err
}

const getSourceBasedNews = `-- name: GetSourceBasedNews :many
SELECT n.id, n.source, n.author, n.title, n.description, n.url, n.publishedat, S.source_name FROM news N
INNER JOIN source S ON S.id = N.source
WHERE N.source = $1
`

type GetSourceBasedNewsRow struct {
	ID          int64
	Source      string
	Author      sql.NullString
	Title       sql.NullString
	Description sql.NullString
	Url         sql.NullString
	Publishedat sql.NullTime
	SourceName  string
}

func (q *Queries) GetSourceBasedNews(ctx context.Context, source string) ([]GetSourceBasedNewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSourceBasedNews, source)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSourceBasedNewsRow
	for rows.Next() {
		var i GetSourceBasedNewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Source,
			&i.Author,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.Publishedat,
			&i.SourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
