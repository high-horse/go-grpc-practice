// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: news_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Newservice_GetNewsStream_FullMethodName = "/news.Newservice/GetNewsStream"
)

// NewserviceClient is the client API for Newservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewserviceClient interface {
	GetNewsStream(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (Newservice_GetNewsStreamClient, error)
}

type newserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewserviceClient(cc grpc.ClientConnInterface) NewserviceClient {
	return &newserviceClient{cc}
}

func (c *newserviceClient) GetNewsStream(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (Newservice_GetNewsStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Newservice_ServiceDesc.Streams[0], Newservice_GetNewsStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &newserviceGetNewsStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Newservice_GetNewsStreamClient interface {
	Recv() (*News, error)
	grpc.ClientStream
}

type newserviceGetNewsStreamClient struct {
	grpc.ClientStream
}

func (x *newserviceGetNewsStreamClient) Recv() (*News, error) {
	m := new(News)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NewserviceServer is the server API for Newservice service.
// All implementations must embed UnimplementedNewserviceServer
// for forward compatibility
type NewserviceServer interface {
	GetNewsStream(*NewsRequest, Newservice_GetNewsStreamServer) error
	mustEmbedUnimplementedNewserviceServer()
}

// UnimplementedNewserviceServer must be embedded to have forward compatible implementations.
type UnimplementedNewserviceServer struct {
}

func (UnimplementedNewserviceServer) GetNewsStream(*NewsRequest, Newservice_GetNewsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNewsStream not implemented")
}
func (UnimplementedNewserviceServer) mustEmbedUnimplementedNewserviceServer() {}

// UnsafeNewserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewserviceServer will
// result in compilation errors.
type UnsafeNewserviceServer interface {
	mustEmbedUnimplementedNewserviceServer()
}

func RegisterNewserviceServer(s grpc.ServiceRegistrar, srv NewserviceServer) {
	s.RegisterService(&Newservice_ServiceDesc, srv)
}

func _Newservice_GetNewsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NewserviceServer).GetNewsStream(m, &newserviceGetNewsStreamServer{ServerStream: stream})
}

type Newservice_GetNewsStreamServer interface {
	Send(*News) error
	grpc.ServerStream
}

type newserviceGetNewsStreamServer struct {
	grpc.ServerStream
}

func (x *newserviceGetNewsStreamServer) Send(m *News) error {
	return x.ServerStream.SendMsg(m)
}

// Newservice_ServiceDesc is the grpc.ServiceDesc for Newservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Newservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "news.Newservice",
	HandlerType: (*NewserviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNewsStream",
			Handler:       _Newservice_GetNewsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "news_service.proto",
}
