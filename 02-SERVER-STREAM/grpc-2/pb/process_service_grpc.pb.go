// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: process_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Processes_GetProcessesInfo_FullMethodName = "/process_management.Processes/GetProcessesInfo"
)

// ProcessesClient is the client API for Processes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessesClient interface {
	GetProcessesInfo(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (Processes_GetProcessesInfoClient, error)
}

type processesClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessesClient(cc grpc.ClientConnInterface) ProcessesClient {
	return &processesClient{cc}
}

func (c *processesClient) GetProcessesInfo(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (Processes_GetProcessesInfoClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Processes_ServiceDesc.Streams[0], Processes_GetProcessesInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &processesGetProcessesInfoClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Processes_GetProcessesInfoClient interface {
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type processesGetProcessesInfoClient struct {
	grpc.ClientStream
}

func (x *processesGetProcessesInfoClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessesServer is the server API for Processes service.
// All implementations must embed UnimplementedProcessesServer
// for forward compatibility
type ProcessesServer interface {
	GetProcessesInfo(*ProcessRequest, Processes_GetProcessesInfoServer) error
	mustEmbedUnimplementedProcessesServer()
}

// UnimplementedProcessesServer must be embedded to have forward compatible implementations.
type UnimplementedProcessesServer struct {
}

func (UnimplementedProcessesServer) GetProcessesInfo(*ProcessRequest, Processes_GetProcessesInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProcessesInfo not implemented")
}
func (UnimplementedProcessesServer) mustEmbedUnimplementedProcessesServer() {}

// UnsafeProcessesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessesServer will
// result in compilation errors.
type UnsafeProcessesServer interface {
	mustEmbedUnimplementedProcessesServer()
}

func RegisterProcessesServer(s grpc.ServiceRegistrar, srv ProcessesServer) {
	s.RegisterService(&Processes_ServiceDesc, srv)
}

func _Processes_GetProcessesInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessesServer).GetProcessesInfo(m, &processesGetProcessesInfoServer{ServerStream: stream})
}

type Processes_GetProcessesInfoServer interface {
	Send(*ProcessResponse) error
	grpc.ServerStream
}

type processesGetProcessesInfoServer struct {
	grpc.ServerStream
}

func (x *processesGetProcessesInfoServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Processes_ServiceDesc is the grpc.ServiceDesc for Processes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Processes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "process_management.Processes",
	HandlerType: (*ProcessesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetProcessesInfo",
			Handler:       _Processes_GetProcessesInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "process_service.proto",
}
